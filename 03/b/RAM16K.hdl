// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/3/b/RAM16K.hdl
/**
 * Memory of 16K 16-bit registers.
 * If load is asserted, the value of the register selected by
 * address is set to in; Otherwise, the value does not change.
 * The value of the selected register is emitted by out.
 * same as ram 64 but longer address: another 2 bits, 
 * quadrupaled size (previously jumps of 8)
 */
CHIP RAM16K {
    IN in[16], load, address[14];
    OUT out[16];

    PARTS:

    // dmux load using last 2 bits of address 12..13
    DMux4Way(in=load, sel=address[12..13], a=ram4KLoad0, b=ram4KLoad1, c=ram4KLoad2, d=ram4KLoad3);

    // create 4 RAM4K chips and use all bits up to last 2
    RAM4K(in=in, load=ram4KLoad0, address=address[0..11], out=out0);
    RAM4K(in=in, load=ram4KLoad1, address=address[0..11], out=out1);
    RAM4K(in=in, load=ram4KLoad2, address=address[0..11], out=out2);
    RAM4K(in=in, load=ram4KLoad3, address=address[0..11], out=out3);

    // mux out
    Mux4Way16(a=out0, b=out1, c=out2, d=out3, sel=address[12..13], out=out);
}