// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/3/b/RAM4K.hdl
/**
 * Memory of 4K 16-bit registers.
 * If load is asserted, the value of the register selected by
 * address is set to in; Otherwise, the value does not change.
 * The value of the selected register is emitted by out.
 * same as ram64
 */
CHIP RAM4K {
    IN in[16], load, address[12];
    OUT out[16];

    PARTS:
// dmux load using last 3 bits of address 9..11
    DMux8Way(in=load, sel=address[9..11], a=ram512Load0, b=ram512Load1, c=ram512Load2, d=ram512Load3, e=ram512Load4, f=ram512Load5, g=ram512Load6, h=ram512Load7);

    // // create 8 RAM8 and use all bits up to last 3
    RAM512(in=in, load=ram512Load0, address=address[0..8], out=out0);
    RAM512(in=in, load=ram512Load1, address=address[0..8], out=out1);
    RAM512(in=in, load=ram512Load2, address=address[0..8], out=out2);
    RAM512(in=in, load=ram512Load3, address=address[0..8], out=out3);
    RAM512(in=in, load=ram512Load4, address=address[0..8], out=out4);
    RAM512(in=in, load=ram512Load5, address=address[0..8], out=out5);
    RAM512(in=in, load=ram512Load6, address=address[0..8], out=out6);
    RAM512(in=in, load=ram512Load7, address=address[0..8], out=out7);

    // mux out with last 3 bits of address as sel
    Mux8Way16(a=out0, b=out1, c=out2, d=out3, e=out4, f=out5, g=out6, h=out7, sel=address[9..11], out=out);

}