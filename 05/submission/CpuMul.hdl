// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

// This chip is an extension of the regular CPU that uses the extended ALU.
// If instruction[15]==0 or (instruction[14]==1 and instruction[13]==1),
// then CpuMul behaves exactly the same as the regular CPU.
// If instruction[15]==1 and instruction[14]==0 the chip will behave as follows:
// | Instruction           | 15 | 14 | 13 | a | c1 | c2 | c3 | c4 | c5 | c6 |
// |-----------------------|:--:|:--:|:--:|:-:|:--:|:--:|:--:|:--:|:--:|:--:|
// | Regular a-instruction |  0 |  * |  * | * |  * |  * |  * |  * |  * |  * |
// | Regular c-instruction |  1 |  1 |  1 | * |  * |  * |  * |  * |  * |  * |
// | dest=A<<;jump         |  1 |  0 |  1 | 0 |  1 |  0 |  0 |  0 |  0 |  0 |
// | dest=D<<;jump         |  1 |  0 |  1 | 0 |  1 |  1 |  0 |  0 |  0 |  0 |
// | dest=M<<;jump         |  1 |  0 |  1 | 1 |  1 |  0 |  0 |  0 |  0 |  0 |
// | dest=A>>;jump         |  1 |  0 |  1 | 0 |  0 |  0 |  0 |  0 |  0 |  0 |
// | dest=D>>;jump         |  1 |  0 |  1 | 0 |  0 |  1 |  0 |  0 |  0 |  0 |
// | dest=M>>;jump         |  1 |  0 |  1 | 1 |  0 |  0 |  0 |  0 |  0 |  0 |
// Where:
// - "<<" is a left shift, and ">>" is a right shift, as defined in project 2.
//   These notations were chosen because they are used in real programming
//   languages.
// - dest and jump can take the same values as in the regular CPU.

CHIP CpuMul {
    IN  
        inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).
    OUT 
        outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction
    
    PARTS:
    // D reg: check load of D reg: c instruction & D bit
        And(a=instruction[15], b=instruction[4], out=dRegLoad);
        DRegister(in=aluOut, load=dRegLoad , out= dRegOut);

    //A reg:
        //ARegMux: select instruction or alu out. load instruction of inst[15] is 0
        Mux16(a=instruction, b=aluOut , sel=instruction[15] , out=aRegMux);
        //load if A instruction (inst[15] is 0), or save A (inst[5])
        Not(in=instruction[15], out= isA);
        Or(a=isA, b=instruction[5], out=aRegLoad);
        ARegister(in=aRegMux, load=aRegLoad, out=aRegOut, out[0..14]=addressM);

    //ALU
        //mux: input A or M 0 or 1 in inist[12] respectively
        Mux16(a=aRegOut, b=inM, sel=instruction[12], out=aluMux);
        ExtendAlu(x=dRegOut, y=aluMux, instruction=instruction[6..14],
        out= aluOut, out=outM,
        zr=aluZr, ng=aluNg);

    //write M: easy: if the M bit in d bits of a C inst:
        And(a=instruction[15], b=instruction[3], out= writeM);

    //Jump: by default increment. reset if passed as input.
        //should jump: using ALU flags and C instruction
        // we know if ALU out is neg or zero from AluZr and AluNg

        //we check if pos if neither negative nor zero
        Or(a=aluZr, b=aluNg , out=zrOrNg);
        Not(in=zrOrNg, out=aluPos);

        //use and gates to check each possibilty:
        And(a=aluPos, b=instruction[0], out=jumpIfPos);
        And(a=aluZr, b=instruction[1], out=jumpIfZr); // zr: out == 0
        And(a=aluNg, b=instruction[2], out=jumpIfNg); // ng: out < 0

        // check if any were true: use 3 bits of Or8way
        Or8Way(in[0]= jumpIfPos,in[1]= jumpIfZr,in[2]= jumpIfNg, in[3..7]=false, out=couldJump);
        //jump if C instruction:
        And(a= instruction[15], b= couldJump, out= willJump);
        PC(in=aRegOut, load=willJump, inc= true, reset=reset, out[0..14]=pc);


}
